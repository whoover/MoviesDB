///
/// @Generated by Mockolo
///

import Foundation
@testable import MDBNetworking

public class HTTPServiceProtocolMock: HTTPServiceProtocol {
  public init() {}
  public init(ignoreSecurityCheck: Bool = false) {
    self.ignoreSecurityCheck = ignoreSecurityCheck
  }

  public private(set) var ignoreSecurityCheckSetCallCount = 0
  public var ignoreSecurityCheck: Bool = false { didSet { ignoreSecurityCheckSetCallCount += 1 } }

  public var reachabilityChangePublisher: AnyPublisher<Bool, Never> { reachabilityChangePublisherSubject.eraseToAnyPublisher() }
  public private(set) var reachabilityChangePublisherSubject = PassthroughSubject<Bool, Never>()

  public private(set) var isReachableCallCount = 0
  public var isReachableHandler: (() -> (Bool))?
  public func isReachable() -> Bool {
    isReachableCallCount += 1
    if let isReachableHandler = isReachableHandler {
      return isReachableHandler()
    }
    return false
  }

  public private(set) var httpTaskWithCallCount = 0
  public var httpTaskWithHandler: ((Any, URLSessionConfigurationType) -> (AnyPublisher<Data, Error>))?
  public func httpTaskWith<Response, Decoder, Request>(request: Request, configurationType: URLSessionConfigurationType) -> AnyPublisher<Data, Error>
    where Request: BaseHTTPRequest<Response, Decoder>,
    Response: BaseResponseProtocol,
    Decoder: CustomDecoder,
    Decoder.Decoder.Input == Data
  {
    httpTaskWithCallCount += 1
    if let httpTaskWithHandler = httpTaskWithHandler {
      return httpTaskWithHandler(request, configurationType)
    }
    fatalError("httpTaskWithHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var hashTaskWithCallCount = 0
  public var hashTaskWithHandler: ((URLRequest) -> (AnyPublisher<Data, NetworkingError>))?
  public func hashTaskWith(url: URLRequest) -> AnyPublisher<Data, NetworkingError> {
    hashTaskWithCallCount += 1
    if let hashTaskWithHandler = hashTaskWithHandler {
      return hashTaskWithHandler(url)
    }
    fatalError("hashTaskWithHandler returns can't have a default value thus its handler must be set")
  }
}

public class NetworkingServiceProtocolMock: NetworkingServiceProtocol {
  public init() {}
  public init(httpService: HTTPServiceProtocol? = nil) {
    self.httpService = httpService
  }

  public private(set) var httpServiceSetCallCount = 0
  public var httpService: HTTPServiceProtocol? { didSet { httpServiceSetCallCount += 1 } }

  public var reachabilityChangePublisher: AnyPublisher<Bool, Never> { reachabilityChangePublisherSubject.eraseToAnyPublisher() }
  public private(set) var reachabilityChangePublisherSubject = PassthroughSubject<Bool, Never>()

  public private(set) var isReachableCallCount = 0
  public var isReachableHandler: (() -> (Bool))?
  public func isReachable() -> Bool {
    isReachableCallCount += 1
    if let isReachableHandler = isReachableHandler {
      return isReachableHandler()
    }
    return false
  }

  public private(set) var httpTaskWithCallCount = 0
  public var httpTaskWithHandler: ((Any, URLSessionConfigurationType) -> (Any))?
  public func httpTaskWith<Response, Decoder, Request>(request: Request, configurationType: URLSessionConfigurationType) -> AnyPublisher<Response, Error>
    where Request: BaseHTTPRequest<Response, Decoder>,
    Response: BaseResponseProtocol,
    Decoder: CustomDecoder,
    Decoder.Decoder.Input == Data
  {
    httpTaskWithCallCount += 1
    if let httpTaskWithHandler = httpTaskWithHandler {
      return httpTaskWithHandler(request, configurationType) as! AnyPublisher<Response, Error>
    }
    fatalError("httpTaskWithHandler returns can't have a default value thus its handler must be set")
  }
}
