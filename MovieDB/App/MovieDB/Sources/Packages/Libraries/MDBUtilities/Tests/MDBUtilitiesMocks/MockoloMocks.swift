///
/// @Generated by Mockolo
///

import Combine
import Foundation
import MDBCommon
import MDBCommonUI
@testable import MDBUtilities
import SwiftUI
import UIKit

public class ColorTypeProtocolMock: ColorTypeProtocol {
  public init() {}

  public private(set) var isEqualCallCount = 0
  public var isEqualHandler: ((ColorTypeProtocol) -> (Bool))?
  public func isEqual(_ other: ColorTypeProtocol) -> Bool {
    isEqualCallCount += 1
    if let isEqualHandler = isEqualHandler {
      return isEqualHandler(other)
    }
    return false
  }
}

public class ThemeManagerProtocolMock: ThemeManagerProtocol {
  public init() {}
  public init(
    currentMode: ModeTypeProtocol = ModeTypeProtocolMock(),
    currentColor: ColorTypeProtocol = ColorTypeProtocolMock(),
    currentTheme: ThemeProtocol = ThemeProtocolMock()
  ) {
    self.currentMode = currentMode
    self.currentColor = currentColor
    self.currentTheme = currentTheme
  }

  public private(set) var currentModeSetCallCount = 0
  public var currentMode: ModeTypeProtocol = ModeTypeProtocolMock() { didSet { currentModeSetCallCount += 1 } }

  public private(set) var currentColorSetCallCount = 0
  public var currentColor: ColorTypeProtocol = ColorTypeProtocolMock() { didSet { currentColorSetCallCount += 1 } }

  public var themePublisher: AnyPublisher<ThemeProtocol, Never> { themePublisherSubject.eraseToAnyPublisher() }
  public private(set) var themePublisherSubject = PassthroughSubject<ThemeProtocol, Never>()

  public private(set) var currentThemeSetCallCount = 0
  public var currentTheme: ThemeProtocol = ThemeProtocolMock() { didSet { currentThemeSetCallCount += 1 } }
}

public class LocalizerProtocolMock: LocalizerProtocol {
  public init() {}
  public init(currentLanguage: Language, l10n: L10n.Type) {
    _currentLanguage = currentLanguage
    _l10n = l10n
  }

  public private(set) var currentLanguageSetCallCount = 0
  private var _currentLanguage: Language! { didSet { currentLanguageSetCallCount += 1 } }
  public var currentLanguage: Language {
    get { _currentLanguage }
    set { _currentLanguage = newValue }
  }

  public var languagePublisher: AnyPublisher<Language, Never> { languagePublisherSubject.eraseToAnyPublisher() }
  public private(set) var languagePublisherSubject = PassthroughSubject<Language, Never>()

  public private(set) var l10nSetCallCount = 0
  private var _l10n: L10n.Type! { didSet { l10nSetCallCount += 1 } }
  public var l10n: L10n.Type {
    get { _l10n }
    set { _l10n = newValue }
  }

  public private(set) var changeCallCount = 0
  public var changeHandler: ((Language) -> Void)?
  public func change(language: Language) {
    changeCallCount += 1
    if let changeHandler = changeHandler {
      changeHandler(language)
    }
  }
}

public class ModeTypeProtocolMock: ModeTypeProtocol {
  public init() {}

  public private(set) var factoryTypeCallCount = 0
  public var factoryTypeHandler: (() -> (ColorThemeFactoryProtocol.Type))?
  public func factoryType() -> ColorThemeFactoryProtocol.Type {
    factoryTypeCallCount += 1
    if let factoryTypeHandler = factoryTypeHandler {
      return factoryTypeHandler()
    }
    fatalError("factoryTypeHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var isEqualCallCount = 0
  public var isEqualHandler: ((ModeTypeProtocol) -> (Bool))?
  public func isEqual(_ other: ModeTypeProtocol) -> Bool {
    isEqualCallCount += 1
    if let isEqualHandler = isEqualHandler {
      return isEqualHandler(other)
    }
    return false
  }
}

public class ThemeStorageProtocolMock: ThemeStorageProtocol {
  public init() {}
  public init(currentColor: ColorTypeProtocol? = nil, currentMode: ModeTypeProtocol? = nil) {
    self.currentColor = currentColor
    self.currentMode = currentMode
  }

  public private(set) var currentColorSetCallCount = 0
  public var currentColor: ColorTypeProtocol? { didSet { currentColorSetCallCount += 1 } }

  public private(set) var currentModeSetCallCount = 0
  public var currentMode: ModeTypeProtocol? { didSet { currentModeSetCallCount += 1 } }
}

public class UserDefaultsProtocolMock: UserDefaultsProtocol {
  public init() {}

  public private(set) var setCallCount = 0
  public var setHandler: ((Any?, String) -> Void)?
  public func set<V: Codable>(_ value: V?, _ key: String) {
    setCallCount += 1
    if let setHandler = setHandler {
      setHandler(value, key)
    }
  }

  public private(set) var getValueCallCount = 0
  public var getValueHandler: ((String) -> (Any?))?
  public func getValue<V: Codable>(forKey defaultName: String) -> V? {
    getValueCallCount += 1
    if let getValueHandler = getValueHandler {
      return getValueHandler(defaultName) as? V
    }
    return nil
  }

  public private(set) var getValueForKeyCallCount = 0
  public var getValueForKeyHandler: ((String) -> (Any?))?
  public func getValue(forKey defaultName: String) -> Any? {
    getValueForKeyCallCount += 1
    if let getValueForKeyHandler = getValueForKeyHandler {
      return getValueForKeyHandler(defaultName)
    }
    return nil
  }

  public private(set) var registerCallCount = 0
  public var registerHandler: (([String: Any]) -> Void)?
  public func register(defaults registrationDictionary: [String: Any]) {
    registerCallCount += 1
    if let registerHandler = registerHandler {
      registerHandler(registrationDictionary)
    }
  }

  public private(set) var publisherCallCount = 0
  public var publisherHandler: ((Any) -> (Any))?
  public func publisher<Value>(for keyPath: KeyPath<UserDefaults, Value>) -> NSObject.KeyValueObservingPublisher<UserDefaults, Value> {
    publisherCallCount += 1
    if let publisherHandler = publisherHandler {
      return publisherHandler(keyPath) as! NSObject.KeyValueObservingPublisher<UserDefaults, Value>
    }
    fatalError("publisherHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var setValueCallCount = 0
  public var setValueHandler: ((Any?, String) -> Void)?
  public func setValue(_ value: Any?, forKey key: String) {
    setValueCallCount += 1
    if let setValueHandler = setValueHandler {
      setValueHandler(value, key)
    }
  }

  public private(set) var stringCallCount = 0
  public var stringHandler: ((String) -> (String?))?
  public func string(forKey defaultName: String) -> String? {
    stringCallCount += 1
    if let stringHandler = stringHandler {
      return stringHandler(defaultName)
    }
    return nil
  }

  public private(set) var arrayCallCount = 0
  public var arrayHandler: ((String) -> ([Any]?))?
  public func array(forKey defaultName: String) -> [Any]? {
    arrayCallCount += 1
    if let arrayHandler = arrayHandler {
      return arrayHandler(defaultName)
    }
    return nil
  }

  public private(set) var boolCallCount = 0
  public var boolHandler: ((String) -> (Bool))?
  public func bool(forKey: String) -> Bool {
    boolCallCount += 1
    if let boolHandler = boolHandler {
      return boolHandler(forKey)
    }
    return false
  }

  public private(set) var removeObjectCallCount = 0
  public var removeObjectHandler: ((String) -> Void)?
  public func removeObject(forKey defaultName: String) {
    removeObjectCallCount += 1
    if let removeObjectHandler = removeObjectHandler {
      removeObjectHandler(defaultName)
    }
  }
}

public class ThemeProtocolMock: ThemeProtocol {
  public init() {}
  public init(images: ImagesThemeProtocol = ImagesThemeProtocolMock(), colors: ColorsThemeProtocol = ColorsThemeProtocolMock()) {
    self.images = images
    self.colors = colors
  }

  public private(set) var imagesSetCallCount = 0
  public var images: ImagesThemeProtocol = ImagesThemeProtocolMock() { didSet { imagesSetCallCount += 1 } }

  public private(set) var colorsSetCallCount = 0
  public var colors: ColorsThemeProtocol = ColorsThemeProtocolMock() { didSet { colorsSetCallCount += 1 } }
}

public class BundleSettingsServiceProtocolMock: BundleSettingsServiceProtocol {
  public init() {}

  public var environment: AnyPublisher<MovieDBEnvironment, Never> { environmentSubject.eraseToAnyPublisher() }
  public private(set) var environmentSubject = PassthroughSubject<MovieDBEnvironment, Never>()
}

public class ImagesThemeProtocolMock: ImagesThemeProtocol {
  public init() {}
  public init(main: MainImagesThemeProtocol) {
    _main = main
  }

  public private(set) var mainSetCallCount = 0
  private var _main: MainImagesThemeProtocol! { didSet { mainSetCallCount += 1 } }
  public var main: MainImagesThemeProtocol {
    get { _main }
    set { _main = newValue }
  }
}

public class ColorsThemeProtocolMock: ColorsThemeProtocol {
  public init() {}
  public init(main: MainColorsThemeProtocol, components: ComponentsColorsThemeProtocol) {
    _main = main
    _components = components
  }

  public private(set) var mainSetCallCount = 0
  private var _main: MainColorsThemeProtocol! { didSet { mainSetCallCount += 1 } }
  public var main: MainColorsThemeProtocol {
    get { _main }
    set { _main = newValue }
  }

  public private(set) var componentsSetCallCount = 0
  private var _components: ComponentsColorsThemeProtocol! { didSet { componentsSetCallCount += 1 } }
  public var components: ComponentsColorsThemeProtocol {
    get { _components }
    set { _components = newValue }
  }
}

public class SchemeServiceProtocolMock: SchemeServiceProtocol {
  public init() {}
  public init(currentScheme: AppScheme) {
    _currentScheme = currentScheme
  }

  public private(set) var currentSchemeSetCallCount = 0
  private var _currentScheme: AppScheme! { didSet { currentSchemeSetCallCount += 1 } }
  public var currentScheme: AppScheme {
    get { _currentScheme }
    set { _currentScheme = newValue }
  }
}

public class CopyViewColorsThemeProtocolMock: CopyViewColorsThemeProtocol {
  public init() {}
  public init(background: UIColor = .black, text: UIColor = .black) {
    self.background = background
    self.text = text
  }

  public private(set) var backgroundSetCallCount = 0
  public var background: UIColor = .black { didSet { backgroundSetCallCount += 1 } }

  public private(set) var textSetCallCount = 0
  public var text: UIColor = .black { didSet { textSetCallCount += 1 } }
}

public class ButtonColorsThemeProtocolMock: ButtonColorsThemeProtocol {
  public init() {}
  public init(title: UIColor = .black, background: UIColor = .black, disabledTitle: UIColor = .black, disabledBackground: UIColor = .black) {
    self.title = title
    self.background = background
    self.disabledTitle = disabledTitle
    self.disabledBackground = disabledBackground
  }

  public private(set) var titleSetCallCount = 0
  public var title: UIColor = .black { didSet { titleSetCallCount += 1 } }

  public private(set) var backgroundSetCallCount = 0
  public var background: UIColor = .black { didSet { backgroundSetCallCount += 1 } }

  public private(set) var disabledTitleSetCallCount = 0
  public var disabledTitle: UIColor = .black { didSet { disabledTitleSetCallCount += 1 } }

  public private(set) var disabledBackgroundSetCallCount = 0
  public var disabledBackground: UIColor = .black { didSet { disabledBackgroundSetCallCount += 1 } }
}

public class ActivityIndicatorColorsThemeProtocolMock: ActivityIndicatorColorsThemeProtocol {
  public init() {}
  public init(background: UIColor = .black, text: UIColor = .black) {
    self.background = background
    self.text = text
  }

  public private(set) var backgroundSetCallCount = 0
  public var background: UIColor = .black { didSet { backgroundSetCallCount += 1 } }

  public private(set) var textSetCallCount = 0
  public var text: UIColor = .black { didSet { textSetCallCount += 1 } }
}
