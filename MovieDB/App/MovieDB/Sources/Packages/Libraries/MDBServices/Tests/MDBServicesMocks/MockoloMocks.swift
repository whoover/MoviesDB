///
/// @Generated by Mockolo
///

import Combine
import CoreSpotlight
import Firebase
import FirebaseAnalytics
import FirebasePerformance
import Foundation
import MDBConstants
import MDBDataLayer
import MDBNetworking
@testable import MDBServices
import MDBUtilities
import MobileCoreServices
import UIKit

public class NetworkingProviderProtocolMock: NetworkingProviderProtocol {
  public init() {}
  public init(networkingService: NetworkingServiceProtocol) {
    _networkingService = networkingService
  }

  public private(set) var networkingServiceSetCallCount = 0
  private var _networkingService: NetworkingServiceProtocol! { didSet { networkingServiceSetCallCount += 1 } }
  public var networkingService: NetworkingServiceProtocol {
    get { _networkingService }
    set { _networkingService = newValue }
  }
}

public class FirebaseProtocolMock: FirebaseProtocol {
  public init() {}

  public private(set) var eventSubjectSetCallCount = 0
  private var _eventSubject: PassthroughSubject<EventProtocol, Never>! { didSet { eventSubjectSetCallCount += 1 } }
  public var eventSubject: PassthroughSubject<EventProtocol, Never> {
    get { _eventSubject }
    set { _eventSubject = newValue }
  }

  public private(set) var configureOnStartCallCount = 0
  public var configureOnStartHandler: ((Bool) -> Void)?
  public func configureOnStart(enabled: Bool) {
    configureOnStartCallCount += 1
    if let configureOnStartHandler = configureOnStartHandler {
      configureOnStartHandler(enabled)
    }
  }

  public private(set) var startCallCount = 0
  public var startHandler: (() -> Void)?
  public func start() {
    startCallCount += 1
    if let startHandler = startHandler {
      startHandler()
    }
  }

  public private(set) var stopCallCount = 0
  public var stopHandler: (() -> Void)?
  public func stop() {
    stopCallCount += 1
    if let stopHandler = stopHandler {
      stopHandler()
    }
  }

  public private(set) static var serviceCallCount = 0
  public static var serviceHandler: (() -> (AnalyticsServiceProtocol?))?
  public static func service() -> AnalyticsServiceProtocol? {
    serviceCallCount += 1
    if let serviceHandler = serviceHandler {
      return serviceHandler()
    }
    return nil
  }
}
