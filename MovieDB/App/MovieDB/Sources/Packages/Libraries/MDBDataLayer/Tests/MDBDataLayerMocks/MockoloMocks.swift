///
/// @Generated by Mockolo
///

@testable import MDBDataLayer

public class DatabaseServiceProtocolMock: DatabaseServiceProtocol {
  public init() {}

  public private(set) var setupCallCount = 0
  public var setupHandler: ((UInt64, URL?) -> Void)?
  public func setup(version: UInt64, realmURL: URL?) {
    setupCallCount += 1
    if let setupHandler = setupHandler {
      setupHandler(version, realmURL)
    }
  }

  public private(set) var allCacheIdentifiableModelsPublisherCallCount = 0
  public var allCacheIdentifiableModelsPublisherHandler: ((Any) -> (Any))?
  public func allCacheIdentifiableModelsPublisher<T: RunTimeModelProtocol>(of type: T.Type) -> AnyPublisher<[T], DatabaseError> {
    allCacheIdentifiableModelsPublisherCallCount += 1
    if let allCacheIdentifiableModelsPublisherHandler = allCacheIdentifiableModelsPublisherHandler {
      return allCacheIdentifiableModelsPublisherHandler(type) as! AnyPublisher<[T], DatabaseError>
    }
    fatalError("allCacheIdentifiableModelsPublisherHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var cacheIdentifiableModelCallCount = 0
  public var cacheIdentifiableModelHandler: ((String, Any) -> (Any))?
  public func cacheIdentifiableModel<T: RunTimeModelProtocol>(for requestKey: String, of type: T.Type) -> AnyPublisher<T, DatabaseError> {
    cacheIdentifiableModelCallCount += 1
    if let cacheIdentifiableModelHandler = cacheIdentifiableModelHandler {
      return cacheIdentifiableModelHandler(requestKey, type) as! AnyPublisher<T, DatabaseError>
    }
    fatalError("cacheIdentifiableModelHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var addOrUpdateCallCount = 0
  public var addOrUpdateHandler: ((RunTimeModelProtocol) -> (AnyPublisher<Void, DatabaseError>))?
  public func addOrUpdate(object: RunTimeModelProtocol) -> AnyPublisher<Void, DatabaseError> {
    addOrUpdateCallCount += 1
    if let addOrUpdateHandler = addOrUpdateHandler {
      return addOrUpdateHandler(object)
    }
    fatalError("addOrUpdateHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var setCacheIdentifiableCallCount = 0
  public var setCacheIdentifiableHandler: ((RunTimeModelProtocol) -> (AnyPublisher<Void, DatabaseError>))?
  public func setCacheIdentifiable(model: RunTimeModelProtocol) -> AnyPublisher<Void, DatabaseError> {
    setCacheIdentifiableCallCount += 1
    if let setCacheIdentifiableHandler = setCacheIdentifiableHandler {
      return setCacheIdentifiableHandler(model)
    }
    fatalError("setCacheIdentifiableHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var addOrUpdateObjectsCallCount = 0
  public var addOrUpdateObjectsHandler: (([RunTimeModelProtocol]) -> (AnyPublisher<Void, DatabaseError>))?
  public func addOrUpdate(objects: [RunTimeModelProtocol]) -> AnyPublisher<Void, DatabaseError> {
    addOrUpdateObjectsCallCount += 1
    if let addOrUpdateObjectsHandler = addOrUpdateObjectsHandler {
      return addOrUpdateObjectsHandler(objects)
    }
    fatalError("addOrUpdateObjectsHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var getAllCallCount = 0
  public var getAllHandler: ((Any) -> (Any))?
  public func getAll<T: RunTimeModelProtocol>(of type: T.Type) -> AnyPublisher<[T], DatabaseError> {
    getAllCallCount += 1
    if let getAllHandler = getAllHandler {
      return getAllHandler(type) as! AnyPublisher<[T], DatabaseError>
    }
    fatalError("getAllHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var getCallCount = 0
  public var getHandler: ((Any) -> (Any))?
  public func get<T: RunTimeModelProtocol>(primaryKey: Any) -> AnyPublisher<T, DatabaseError> {
    getCallCount += 1
    if let getHandler = getHandler {
      return getHandler(primaryKey) as! AnyPublisher<T, DatabaseError>
    }
    fatalError("getHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var removeCallCount = 0
  public var removeHandler: ((Any) -> (AnyPublisher<Void, DatabaseError>))?
  public func remove<T: RunTimeModelProtocol>(object: T) -> AnyPublisher<Void, DatabaseError> {
    removeCallCount += 1
    if let removeHandler = removeHandler {
      return removeHandler(object)
    }
    fatalError("removeHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var removeAllCallCount = 0
  public var removeAllHandler: ((Any) -> (Any))?
  public func removeAll<T: RunTimeModelProtocol>(of type: T.Type) -> AnyPublisher<T.Type, DatabaseError> {
    removeAllCallCount += 1
    if let removeAllHandler = removeAllHandler {
      return removeAllHandler(type) as! AnyPublisher<T.Type, DatabaseError>
    }
    fatalError("removeAllHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var removeAllAnyPublisherVoidDatabaseErrorCallCount = 0
  public var removeAllAnyPublisherVoidDatabaseErrorHandler: (() -> (AnyPublisher<Void, DatabaseError>))?
  public func removeAll() -> AnyPublisher<Void, DatabaseError> {
    removeAllAnyPublisherVoidDatabaseErrorCallCount += 1
    if let removeAllAnyPublisherVoidDatabaseErrorHandler = removeAllAnyPublisherVoidDatabaseErrorHandler {
      return removeAllAnyPublisherVoidDatabaseErrorHandler()
    }
    fatalError("removeAllAnyPublisherVoidDatabaseErrorHandler returns can't have a default value thus its handler must be set")
  }
}
