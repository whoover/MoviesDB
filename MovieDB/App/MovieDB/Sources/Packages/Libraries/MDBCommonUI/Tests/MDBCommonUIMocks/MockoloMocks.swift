///
/// @Generated by Mockolo
///

import Combine
import CoreGraphics
import Foundation
import MDBCommon
@testable import MDBCommonUI
import UIKit

public class PresentableProtocolMock: PresentableProtocol {
  public init() {}

  public private(set) var toPresentCallCount = 0
  public var toPresentHandler: (() -> (UIViewController?))?
  public func toPresent() -> UIViewController? {
    toPresentCallCount += 1
    if let toPresentHandler = toPresentHandler {
      return toPresentHandler()
    }
    return nil
  }
}

public class CoordinatorRouterProtocolMock: CoordinatorRouterProtocol {
  public init() {}
  public init(rootViewController: UIViewController? = nil) {
    self.rootViewController = rootViewController
  }

  public private(set) var rootViewControllerSetCallCount = 0
  public var rootViewController: UIViewController? { didSet { rootViewControllerSetCallCount += 1 } }

  public private(set) var setViewControllerCallCount = 0
  public var setViewControllerHandler: ((UIViewController) -> Void)?
  public func setViewController(_ controller: UIViewController) {
    setViewControllerCallCount += 1
    if let setViewControllerHandler = setViewControllerHandler {
      setViewControllerHandler(controller)
    }
  }

  public private(set) var showScreenCallCount = 0
  public var showScreenHandler: ((PresentableProtocol) -> Void)?
  public func showScreen(_ module: PresentableProtocol) {
    showScreenCallCount += 1
    if let showScreenHandler = showScreenHandler {
      showScreenHandler(module)
    }
  }

  public private(set) var presentCallCount = 0
  public var presentHandler: ((PresentableProtocol) -> (EmptyPublisher))?
  public func present(_ module: PresentableProtocol) -> EmptyPublisher {
    presentCallCount += 1
    if let presentHandler = presentHandler {
      return presentHandler(module)
    }
    fatalError("presentHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var presentModuleCallCount = 0
  public var presentModuleHandler: ((PresentableProtocol, UIModalPresentationStyle) -> (EmptyPublisher))?
  public func present(_ module: PresentableProtocol, style: UIModalPresentationStyle) -> EmptyPublisher {
    presentModuleCallCount += 1
    if let presentModuleHandler = presentModuleHandler {
      return presentModuleHandler(module, style)
    }
    fatalError("presentModuleHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var presentModuleAnimatedCallCount = 0
  public var presentModuleAnimatedHandler: ((PresentableProtocol, Bool, UIModalPresentationStyle) -> (EmptyPublisher))?
  public func present(_ module: PresentableProtocol, animated: Bool, style: UIModalPresentationStyle) -> EmptyPublisher {
    presentModuleAnimatedCallCount += 1
    if let presentModuleAnimatedHandler = presentModuleAnimatedHandler {
      return presentModuleAnimatedHandler(module, animated, style)
    }
    fatalError("presentModuleAnimatedHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var pushCallCount = 0
  public var pushHandler: ((PresentableProtocol, (() -> Void)?) -> Void)?
  public func push(_ module: PresentableProtocol, completion: (() -> Void)?) {
    pushCallCount += 1
    if let pushHandler = pushHandler {
      pushHandler(module, completion)
    }
  }

  public private(set) var pushModuleCallCount = 0
  public var pushModuleHandler: ((PresentableProtocol, Bool, (() -> Void)?) -> Void)?
  public func push(_ module: PresentableProtocol, hideBottomBar: Bool, completion: (() -> Void)?) {
    pushModuleCallCount += 1
    if let pushModuleHandler = pushModuleHandler {
      pushModuleHandler(module, hideBottomBar, completion)
    }
  }

  public private(set) var pushModuleAnimatedCallCount = 0
  public var pushModuleAnimatedHandler: ((PresentableProtocol, Bool, (() -> Void)?) -> Void)?
  public func push(_ module: PresentableProtocol, animated: Bool, completion: (() -> Void)?) {
    pushModuleAnimatedCallCount += 1
    if let pushModuleAnimatedHandler = pushModuleAnimatedHandler {
      pushModuleAnimatedHandler(module, animated, completion)
    }
  }

  public private(set) var pushModuleAnimatedHideBottomBarCallCount = 0
  public var pushModuleAnimatedHideBottomBarHandler: ((PresentableProtocol, Bool, Bool, (() -> Void)?) -> Void)?
  public func push(_ module: PresentableProtocol, animated: Bool, hideBottomBar: Bool, completion: (() -> Void)?) {
    pushModuleAnimatedHideBottomBarCallCount += 1
    if let pushModuleAnimatedHideBottomBarHandler = pushModuleAnimatedHideBottomBarHandler {
      pushModuleAnimatedHideBottomBarHandler(module, animated, hideBottomBar, completion)
    }
  }

  public private(set) var setModulesCallCount = 0
  public var setModulesHandler: (([PresentableProtocol], Bool) -> (EmptyPublisher))?
  public func setModules(_ modules: [PresentableProtocol], animated: Bool) -> EmptyPublisher {
    setModulesCallCount += 1
    if let setModulesHandler = setModulesHandler {
      return setModulesHandler(modules, animated)
    }
    fatalError("setModulesHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var popModuleCallCount = 0
  public var popModuleHandler: (() -> Void)?
  public func popModule() {
    popModuleCallCount += 1
    if let popModuleHandler = popModuleHandler {
      popModuleHandler()
    }
  }

  public private(set) var popModuleAnimatedCallCount = 0
  public var popModuleAnimatedHandler: ((Bool) -> Void)?
  public func popModule(animated: Bool) {
    popModuleAnimatedCallCount += 1
    if let popModuleAnimatedHandler = popModuleAnimatedHandler {
      popModuleAnimatedHandler(animated)
    }
  }

  public private(set) var dismissModuleCallCount = 0
  public var dismissModuleHandler: (() -> (EmptyPublisher))?
  public func dismissModule() -> EmptyPublisher {
    dismissModuleCallCount += 1
    if let dismissModuleHandler = dismissModuleHandler {
      return dismissModuleHandler()
    }
    fatalError("dismissModuleHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var dismissModuleAnimatedCallCount = 0
  public var dismissModuleAnimatedHandler: ((Bool) -> (EmptyPublisher))?
  public func dismissModule(animated: Bool) -> EmptyPublisher {
    dismissModuleAnimatedCallCount += 1
    if let dismissModuleAnimatedHandler = dismissModuleAnimatedHandler {
      return dismissModuleAnimatedHandler(animated)
    }
    fatalError("dismissModuleAnimatedHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var popToFirstControllerInStackCallCount = 0
  public var popToFirstControllerInStackHandler: ((Bool) -> (EmptyPublisher))?
  public func popToFirstControllerInStack(animated: Bool) -> EmptyPublisher {
    popToFirstControllerInStackCallCount += 1
    if let popToFirstControllerInStackHandler = popToFirstControllerInStackHandler {
      return popToFirstControllerInStackHandler(animated)
    }
    fatalError("popToFirstControllerInStackHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var popToRootModuleCallCount = 0
  public var popToRootModuleHandler: ((Bool) -> Void)?
  public func popToRootModule(animated: Bool) {
    popToRootModuleCallCount += 1
    if let popToRootModuleHandler = popToRootModuleHandler {
      popToRootModuleHandler(animated)
    }
  }

  public private(set) var leaveOnlyTopControllerInStackCallCount = 0
  public var leaveOnlyTopControllerInStackHandler: (() -> Void)?
  public func leaveOnlyTopControllerInStack() {
    leaveOnlyTopControllerInStackCallCount += 1
    if let leaveOnlyTopControllerInStackHandler = leaveOnlyTopControllerInStackHandler {
      leaveOnlyTopControllerInStackHandler()
    }
  }

  public private(set) var getAllModulesCallCount = 0
  public var getAllModulesHandler: (() -> ([PresentableProtocol]))?
  public func getAllModules() -> [PresentableProtocol] {
    getAllModulesCallCount += 1
    if let getAllModulesHandler = getAllModulesHandler {
      return getAllModulesHandler()
    }
    return [PresentableProtocol]()
  }

  public private(set) var removeViewControllersFromStackCallCount = 0
  public var removeViewControllersFromStackHandler: ((Int) -> Void)?
  public func removeViewControllersFromStack(count: Int) {
    removeViewControllersFromStackCallCount += 1
    if let removeViewControllersFromStackHandler = removeViewControllersFromStackHandler {
      removeViewControllersFromStackHandler(count)
    }
  }
}

public class CoordinatorProtocolMock: CoordinatorProtocol {
  public init() {}
  public init(path: String? = nil, router: CoordinatorRouterProtocol = CoordinatorRouterProtocolMock(), childCoordinators: WeakArray<CoordinatorProtocol>) {
    self.path = path
    self.router = router
    _childCoordinators = childCoordinators
  }

  public private(set) var toPresentCallCount = 0
  public var toPresentHandler: (() -> (UIViewController?))?
  public func toPresent() -> UIViewController? {
    toPresentCallCount += 1
    if let toPresentHandler = toPresentHandler {
      return toPresentHandler()
    }
    return nil
  }

  public private(set) var startModuleSubjectSetCallCount = 0
  private var _startModuleSubject: PassthroughSubject<CoordinatorProtocol, Never>! { didSet { startModuleSubjectSetCallCount += 1 } }
  public var startModuleSubject: PassthroughSubject<CoordinatorProtocol, Never> {
    get { _startModuleSubject }
    set { _startModuleSubject = newValue }
  }

  public private(set) var pathSetCallCount = 0
  public var path: String? { didSet { pathSetCallCount += 1 } }

  public private(set) var routerSetCallCount = 0
  public var router: CoordinatorRouterProtocol = CoordinatorRouterProtocolMock() { didSet { routerSetCallCount += 1 } }

  public private(set) var childCoordinatorsSetCallCount = 0
  private var _childCoordinators: WeakArray<CoordinatorProtocol>! { didSet { childCoordinatorsSetCallCount += 1 } }
  public var childCoordinators: WeakArray<CoordinatorProtocol> {
    get { _childCoordinators }
    set { _childCoordinators = newValue }
  }

  public private(set) var startCallCount = 0
  public var startHandler: (() -> Void)?
  public func start() {
    startCallCount += 1
    if let startHandler = startHandler {
      startHandler()
    }
  }

  public private(set) var startWithCallCount = 0
  public var startWithHandler: ((DeepLinkOptionProtocol?) -> Void)?
  public func start(with option: DeepLinkOptionProtocol?) {
    startWithCallCount += 1
    if let startWithHandler = startWithHandler {
      startWithHandler(option)
    }
  }

  public private(set) var startSetupBlockCallCount = 0
  public var startSetupBlockHandler: ((CoordinatorSetupBlock?) -> Void)?
  public func start(_ setupBlock: CoordinatorSetupBlock?) {
    startSetupBlockCallCount += 1
    if let startSetupBlockHandler = startSetupBlockHandler {
      startSetupBlockHandler(setupBlock)
    }
  }

  public private(set) var startWithSetupBlockCallCount = 0
  public var startWithSetupBlockHandler: ((DeepLinkOptionProtocol?, CoordinatorSetupBlock?) -> Void)?
  public func start(with option: DeepLinkOptionProtocol?, setupBlock: CoordinatorSetupBlock?) {
    startWithSetupBlockCallCount += 1
    if let startWithSetupBlockHandler = startWithSetupBlockHandler {
      startWithSetupBlockHandler(option, setupBlock)
    }
  }

  public private(set) var addChildCallCount = 0
  public var addChildHandler: ((CoordinatorProtocol) -> Void)?
  public func addChild(_ coordinator: CoordinatorProtocol) {
    addChildCallCount += 1
    if let addChildHandler = addChildHandler {
      addChildHandler(coordinator)
    }
  }

  public private(set) var closeCallCount = 0
  public var closeHandler: (() -> Void)?
  public func close() {
    closeCallCount += 1
    if let closeHandler = closeHandler {
      closeHandler()
    }
  }

  public private(set) var goBackCallCount = 0
  public var goBackHandler: (() -> Void)?
  public func goBack() {
    goBackCallCount += 1
    if let goBackHandler = goBackHandler {
      goBackHandler()
    }
  }
}

public class CoordinationExitPointProtocolMock: CoordinationExitPointProtocol {
  public init() {}

  public private(set) var performRouteForBackRoutingCallCount = 0
  public var performRouteForBackRoutingHandler: ((CoordinatorProtocol) -> Void)?
  public func performRouteForBackRouting(_ coordinator: CoordinatorProtocol) {
    performRouteForBackRoutingCallCount += 1
    if let performRouteForBackRoutingHandler = performRouteForBackRoutingHandler {
      performRouteForBackRoutingHandler(coordinator)
    }
  }

  public private(set) var performRouteForCloseRoutingCallCount = 0
  public var performRouteForCloseRoutingHandler: ((CoordinatorProtocol) -> (EmptyPublisher))?
  public func performRouteForCloseRouting(_ coordinator: CoordinatorProtocol) -> EmptyPublisher {
    performRouteForCloseRoutingCallCount += 1
    if let performRouteForCloseRoutingHandler = performRouteForCloseRoutingHandler {
      return performRouteForCloseRoutingHandler(coordinator)
    }
    fatalError("performRouteForCloseRoutingHandler returns can't have a default value thus its handler must be set")
  }
}

public class FlowExitPointProtocolMock: FlowExitPointProtocol {
  public init() {}

  public private(set) var performRouteForBackRoutingCallCount = 0
  public var performRouteForBackRoutingHandler: ((CoordinatorProtocol) -> Void)?
  public func performRouteForBackRouting(_ coordinator: CoordinatorProtocol) {
    performRouteForBackRoutingCallCount += 1
    if let performRouteForBackRoutingHandler = performRouteForBackRoutingHandler {
      performRouteForBackRoutingHandler(coordinator)
    }
  }

  public private(set) var performRouteForCloseRoutingCallCount = 0
  public var performRouteForCloseRoutingHandler: ((CoordinatorProtocol) -> (EmptyPublisher))?
  public func performRouteForCloseRouting(_ coordinator: CoordinatorProtocol) -> EmptyPublisher {
    performRouteForCloseRoutingCallCount += 1
    if let performRouteForCloseRoutingHandler = performRouteForCloseRoutingHandler {
      return performRouteForCloseRoutingHandler(coordinator)
    }
    fatalError("performRouteForCloseRoutingHandler returns can't have a default value thus its handler must be set")
  }
}
